[tool.poetry]
name = "quantdesk"
version = "0.1.0"
description = "Open-source quantitative trading research platform"
authors = ["QuantDesk Team <team@quantdesk.io>"]
readme = "README.md"
license = "AGPL-3.0"
homepage = "https://github.com/quantdesk/quantdesk"
repository = "https://github.com/quantdesk/quantdesk"
documentation = "https://quantdesk.readthedocs.io"
keywords = ["quantitative", "trading", "backtesting", "finance", "research"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
]

[tool.poetry.dependencies]
python = "^3.11"
numpy = "^1.26.0"
pandas = "^2.2.0"
scipy = "^1.13.0"
statsmodels = "^0.14.0"
ta = "^0.10.2"
backtrader = "^1.9.76"
vectorbt = "^0.25.0"
mlflow = "^2.14.0"
scikit-learn = "^1.5.0"
torch = "^2.3.0"
yfinance = "^0.2.40"
alpaca-trade-api = "^3.2.0"
ccxt = "^4.3.0"
fastapi = "^0.111.0"
uvicorn = {extras = ["standard"], version = "^0.30.0"}
pydantic = "^2.8.0"
python-dotenv = "^1.0.1"
structlog = "^24.1.0"
scikit-optimize = "^0.9.0"
arch = "^5.6.0"
quantstats = "^0.0.62"
click = "^8.1.0"
websockets = "^10.0"
aiohttp = "^3.8.0"
redis = "^5.0.0"
psycopg2-binary = "^2.9.0"
sqlalchemy = "^2.0.0"
alembic = "^1.13.0"
apscheduler = "^3.10.0"
prometheus-client = "^0.20.0"
discord-webhook = "^1.3.0"
plotly = "^5.22.0"
pyarrow = "^15.0.0"
fastavro = "^1.9.0"
jupyterlab = "^4.2.0"
ipywidgets = "^8.1.0"
seaborn = "^0.13.0"
matplotlib = "^3.9.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.0"
black = "^24.3.0"
mypy = "^1.10.0"
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
pytest-xdist = "^3.6.0"
pytest-asyncio = "^0.23.0"
bandit = "^1.7.0"
pre-commit = "^3.7.0"
mkdocs-material = "^9.5.0"
mkdocstrings = {extras = ["python"], version = "^0.25.0"}
jupyter-book = "^1.0.0"
pdoc = "^14.5.0"

[tool.poetry.group.test.dependencies]
httpx = "^0.27.0"
pytest-mock = "^3.14.0"
factory-boy = "^3.3.0"
freezegun = "^1.5.0"

[tool.poetry.scripts]
quantdesk = "quantdesk.cli:main"
fetch-yf = "scripts.fetch_yf:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
select = ["ALL"]
ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",  # Missing docstrings
    "ANN101", "ANN102",  # Missing type annotation for self/cls
    "COM812", "ISC001",  # Conflicts with formatter
    "E501",  # Line too long (handled by black)
    "PLR0913",  # Too many arguments
    "PLR2004",  # Magic value used in comparison
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "SLF001"]
"scripts/*" = ["T201"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "backtrader.*",
    "vectorbt.*",
    "ta.*",
    "ccxt.*",
    "alpaca_trade_api.*",
    "quantstats.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["quantdesk"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
] 